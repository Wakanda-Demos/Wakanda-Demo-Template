(function () {const    MS_BY_YEAR = 31557600000; // 1000 (ms) * 60 (s) * 60 (mn) * 24 (h) * 365.25 (d) -> year/** * FULLNAME **/model.Employee.fullName.onGet = function() {    var        result;    result = this.firstName ? [this.firstName] : [];    if (this.lastName) {        result.push(this.lastName);    }    return result.join(' ');};model.Employee.fullName.onSet = function() {	// Add your code here;};model.Employee.fullName.onSort = function() {    return (ascending ? "firstName, lastName" : "firstName desc, lastName desc");};model.Employee.fullName.onQuery = function(compOperator, valueToCompare) {    return "firstName " + compOperator + valueToCompare + " || " + "lastName " + compOperator + valueToCompare;};/** * AGE **/model.Employee.age.onGet = function() {    var        today,        interval,        nbYears,        age;    if (this.birthDate === null) {        age = null;    } else {        today = new Date();        interval = today - this.birthDate;        nbYears = Math.floor(interval / MS_BY_YEAR);        age = nbYears;    }    return age;};model.Employee.age.onSet = function() {	// Add your code here;};model.Employee.age.onQuery = function(compOperator, valueToCompare) {    var        not,        birthYearFromAgePlusOne,        lowerlimit,        upperlimit,        result;    if (age === null) {        not = ['is', 'eq', '=', '==', '==='].indexOf(operator) > -1 ? '' : ' not';        result = 'birthDate is' + not + ' null';    } else {        upperlimit = new Date();        birthYearFromAgePlusOne = upperlimit.getFullYear() - age;        upperlimit.setFullYear(birthYearFromAgePlusOne);        lowerlimit = new Date();        lowerlimit.setFullYear(birthYearFromAgePlusOne - 1);        switch (operator) {        case 'is not':        case 'neq':        case '!=':        case '!==':            not = true;            // don't break        case 'is':        case 'eq':        case '=':        case '==':        case '===':            result = "birthDate >= '" + lowerlimit.toISOString() + "'";            result += " and birthDate < '" + upperlimit.toISOString() + "'";            result = not ? ("not (" + result + ")") : result;            break;        case 'gt':        case '>':            result = "birthDate < '" + lowerlimit.toISOString() + "'";            break;        case 'gte':        case '>=':            result = "birthDate <= '" + upperlimit.toISOString() + "'";            break;        case 'lt':        case '<':            result = "birthDate > '" + upperlimit.toISOString() + "'";            break;        case 'lte':        case '<=':            result = "birthDate >= '" + lowerlimit.toISOString() + "'";            break;        default:            console.warn('unknown operator:', operator);            result = null;        }    }    return result;};model.Employee.age.onSort = function() {    return (ascending ? "birthDate desc" : "birthDate");};}());